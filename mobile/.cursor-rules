# 1. Android Proje Konfigürasyonu

Bu projedeki tüm Android mobil kodları, aşağıdaki SDK ve dil versiyonlarına sıkı sıkıya bağlı kalmalıdır. Bu kurallar `mobile/build.gradle.kts` (veya `.gradle`) dosyası için geçerlidir.

- **Compile Sdk:** 35
- **Min Sdk:** 24
- **Target Sdk:** 35
- **Java Versiyonu:** 11 (`JavaVersion.VERSION_11`)
- **Kotlin JVM Target:** "11"

# 2. Kodlama Dili, UI ve Geliştirme Felsefesi

## Dil ve UI Kütüphanesi
- **Dil:** Projenin tamamı **Kotlin** ile yazılacaktır.
- **UI:** Kullanıcı arayüzü (UI) **Jetpack Compose** kullanılarak oluşturulacaktır. XML layout'ları KESİNLİKLE kullanılmamalıdır.
- **Tasarım Sistemi:** **Material 3 (M3)** tasarım sistemi kullanılacaktır. Tüm Composable'lar (`Button`, `TextField`, `Card` vb.) `androidx.compose.material3.*` paketinden içe aktarılmalıdır. Material 2 (`androidx.compose.material.*`) kullanılmasından kaçınılmalıdır.

## AI Davranışı ve Kod Kalitesi
- **Parçalı Geliştirme:** Bu proje, API'lere bağımlı olarak adım adım geliştirilecektir. AI, sadece istenen *mevcut* göreve odaklanmalı, projenin tamamını bir anda bitirmeye veya gereksiz kod üretmeye çalışmamalıdır.
- **Yıkıcı Olmayan Değişiklikler:** Mevcut kodda "keskin" veya "yıkıcı" (destructive) değişiklikler yapma. Kodun üzerine yazmak yerine, mevcut kodu refactor etmeyi veya iyileştirmeyi öner.
- **Temiz Kod (Clean Code):**
    - Kod **modüler, basit ve anlaşılır** olmalıdır.
    - Fonksiyonlar kısa olmalı ve tek bir iş yapmalıdır (Single Responsibility Principle).
    - Karmaşık Composable'lar, küçük ve yeniden kullanılabilir bileşenlere ayrılmalıdır.
- **Hata Kontrolü:** AI, kodu yazarken olası hataları (null-safety, vb.) kontrol etmeli ve mevcut koddaki hataları düzeltmek için proaktif olarak önerilerde bulunmalıdır.
- **Gradle Dosyaları:** `build.gradle` dosyalarında değişiklik yaparken çok dikkatli ol. Kütüphane eklemen istendiğinde, değişikliği doğrudan uygulamak yerine 'Bu değişikliği yap' veya 'Şu bağımlılığı ekle' şeklinde bir kod bloğu öner.

# 3. Mimari Desen ve Klasör Yapısı

## Mimari Model
- **Mimari:** Proje, **MVVM (Model-View-ViewModel)** mimari desenini ve **Temiz Mimari (Clean Architecture)** prensiplerini takip edecektir.
- **Paket Adı:** `mobile` klasörü altındaki ana paket adımız (root package) `com.te4it.mobile` olacaktır. (Eğer paket adınız farklı olacaksa lütfen belirtin, bu kuralı güncelleyelim.)

## Katmanlı Yapı
Tüm kodlar, bu ana paket (`com.te4it.mobile`) altında 3 ana katmana ayrılacaktır:

1.  **`presentation`:**
    -   Sadece UI ve UI mantığını içerir.
    -   Alt paketleri: `screens` (Composable ekranlar), `components` (Yeniden kullanılabilir Composable'lar), `viewmodel` (ViewModel'ler).
2.  **`domain`:**
    -   Uygulamanın iş mantığını içerir. UI veya veri katmanına bağımlı olmamalıdır.
    -   Alt paketleri: `repository` (Repository *arayüzleri*), `usecase` (İş mantığı sınıfları), `model` (Uygulama içi kullanılan veri modelleri).
3.  **`data`:**
    -   Veri kaynaklarını yönetir ve `domain` katmanındaki arayüzleri uygular.
    -   Alt paketleri: `repository` (Repository *uygulamaları*), `network` (Retrofit servisleri), `database` (Room DAO'ları), `dto` (API'den gelen veri transfer objeleri).

AI, yeni bir özellik (feature) oluştururken dosyaları bu katmanlı yapıya uygun olarak doğru klasörlere yerleştirmek zorundadır.


# 4. Temel Kütüphaneler ve Teknik Standartlar

Proje, modern Android geliştirmede endüstri standardı olan aşağıdaki kütüphaneleri kullanacaktır. AI, kod üretirken bu kütüphanelerin kullanımını önceliklendirmelidir.

## Bağımlılık Enjeksiyonu (DI)
- **Kütüphane:** `Hilt`
- **Kural:** Tüm `ViewModel`'ler, `Repository`'ler ve diğer servis sınıfları Hilt kullanılarak enjekte edilmelidir. `@AndroidEntryPoint` ve `@HiltViewModel` gibi anotasyonlar aktif olarak kullanılmalıdır.

## Ağ (Networking)
- **Kütüphane:** `Retrofit`
- **Kural:** Tüm REST API istekleri Retrofit arayüzleri (`interface`) kullanılarak tanımlanmalıdır.
- **JSON Çözümleyici:** API yanıtlarını (DTOs) parse etmek için `kotlinx.serialization` veya `Gson` kullanılacaktır.

## Asenkron İşlemler
- **Teknoloji:** `Kotlin Coroutines` ve `Flow`
- **Kural:** Tüm API istekleri, veritabanı işlemleri ve diğer asenkron görevler `suspend` fonksiyonlar veya `Flow` kullanılarak `ViewModel`'in `viewModelScope`'u içinde yönetilmelidir.

## Yerel Veritabanı (Offline Cache)
- **Kütüphane:** `Room Database`
- **Kural:** API'den gelen verilerin (projeler, görevler, kurslar) çevrimdışı destek için önbelleğe (cache) alınması amacıyla Room kullanılacaktır. `Repository` katmanı bu cache mantığından sorumlu olacaktır.

# 5. Geliştirme Ortamı ve Yürütme Sorumluluğu

## Geliştirme Ortamı (IDE)
- **Tek Yetkili Ortam:** Projenin mobil kısmı (`mobile` klasörü) **Android Studio** ile tam uyumlu olacak şekilde geliştirilecektir. Tüm `build.gradle` yapılandırmaları ve proje yapısı, Android Studio'da "Sync" edildiğinde hatasız çalışmalıdır.

## Yürütme ve Test Sorumluluğu
- **Manuel Test:** Geliştirme sürecinde AI'dan, projenin derlenmiş bir halini (örn: `.apk` veya `.aab` dosyası) oluşturması veya sağlaması **istenmemektedir**.
- **Geliştirici Sorumluluğu:** Projeyi bir emülatörde veya fiziksel cihazda çalıştırma, test etme ve doğrulama sorumluluğu **tamamen geliştiriciye (bana)** aittir.
- **AI'ın Odak Noktası:** AI, yalnızca Android Studio'da "Run" (Çalıştır) butonuna basıldığında hatasız derlenecek **kaynak kodunu (Kotlin/Compose)** ve **konfigürasyon dosyalarını (Gradle)** üretmeye odaklanmalıdır.